service:
  name: branch-api
  app: branch
  org: nicholaspretorius

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  profiles:
    dev: franchisely
  # prod: serverless-prod
  # dynamodb:
  #   stages:
  #     - ${self:provider.stage}
  #   start:
  #     port: 8002
  #     inMemory: true
  #     migrate: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  # - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  profile: ${self:custom.profiles.${self:provider.stage}}
  # cfnRole: arn:aws:iam::839211811792:role/branch-api-dev-eu-west-1-lambdaRole

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    ENTITIES_TABLE: ncp-branches-entities-${self:provider.stage}
    ENTITIES_UPLOADS_S3_BUCKET: ncp-branches-entities-uploads-bucket-${self:provider.stage}

functions:
  ping:
    handler: src/lambda/http/ping.main
    events:
      - http:
          method: get
          path: ping

  getList:
    handler: src/lambda/http/entities/getList.main
    events:
      - http:
          method: get
          path: entities
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTITIES_TABLE}

  get:
    handler: src/lambda/http/entities/get.main
    events:
      - http:
          method: get
          path: entities/{entityId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTITIES_TABLE}

  entityCreate:
    handler: src/lambda/http/entities/create.main
    events:
      - http:
          method: post
          path: entities
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTITIES_TABLE}

  delete:
    handler: src/lambda/http/entities/delete.main
    events:
      - http:
          method: delete
          path: entities/{entityId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTITIES_TABLE}

  update:
    handler: src/lambda/http/entities/update.main
    events:
      - http:
          method: put
          path: entities/{entityId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTITIES_TABLE}

resources:
  - ${file(resources/entities-dynamodb-table.yml)}
  - ${file(resources/entities-uploads-s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
